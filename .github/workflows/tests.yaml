name: Tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_call:

jobs:
  packages:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.packages.outputs.changed }}
      unit: ${{ steps.packages.outputs.unit }}
      pebble: ${{ steps.packages.outputs.pebble }}
      juju: ${{ steps.packages.outputs.juju }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Collect changed packages and record which test suites they have
        id: packages
        run: uv run --no-project --script .github/packages.py ${{ github.base_ref || 'main' }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run linting
        run: make lint

  static:
    needs: packages
    if: ${{ toJson(fromJson(needs.packages.outputs.changed)) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.packages.outputs.changed) }}
        python-version: [
          '3.8',  # oldest supported by Ops
          '3.12',  # latest Ubuntu LTS
          '3.13',  # latest Python release
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run static analysis
        run: make static PY=${{ matrix.python-version }} PKG=${{ matrix.package }}

  unit:
    needs: packages
    if: ${{ toJson(fromJson(needs.packages.outputs.unit)) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.packages.outputs.unit) }}
        python-version: [
          '3.8',  # oldest supported by Ops
          '3.12',  # latest Ubuntu LTS
          '3.13',  # latest Python release
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run unit tests
        run: make unit PY=${{ matrix.python-version }} PKG=${{ matrix.package }}

  pebble:
    needs: packages
    if: ${{ toJson(fromJson(needs.packages.outputs.pebble)) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.packages.outputs.pebble) }}
        pebble-version: [
          'v1.1.1',  # Juju 2.9.50 LTS
          # 'v1.7.4',  # Juju 3.4.6
          # 'v1.10.2',  # Juju 3.5.7
          'v1.19.0',  # Juju 3.6.4 LTS
          'master',
        ]
        python-version: [
          '3.8',  # oldest supported by Ops
          '3.12',  # latest Ubuntu LTS
          '3.13',  # latest Python release
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          # To suppress the "Restore cache failed" error, since there is no go.sum file here.
          cache: false

      - name: Install Pebble
        run: go install github.com/canonical/pebble/cmd/pebble@${{ matrix.pebble-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run Pebble integration tests
        run: make pebble PY=${{ matrix.python-version }} PKG=${{ matrix.package }}

  juju:
    needs: packages
    if: ${{ toJson(fromJson(needs.packages.outputs.juju)) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.packages.outputs.juju) }}
        python-version: [
          '3.8',  # oldest supported by Ops
          '3.12',  # latest Ubuntu LTS
          '3.13',  # latest Python release
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Install concierge
        run: sudo snap install --classic concierge

      - name: Prepare Juju
        run: sudo concierge prepare --verbose --juju-channel=3/stable --charmcraft-channel=3.x/stable -p microk8s

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run Juju integration tests
        run: make juju PY=${{ matrix.python-version }} PKG=${{ matrix.package }}
